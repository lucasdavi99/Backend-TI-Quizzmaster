package com.lucasdavi.quizz.services;

import com.lucasdavi.quizz.models.QuizSession;
import com.lucasdavi.quizz.repositories.QuizSessionRepository;
import com.lucasdavi.quizz.repositories.ScoreRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ScheduledCleanupService {

    @Autowired
    private QuizSessionRepository quizSessionRepository;

    @Autowired
    private ScoreRepository scoreRepository;


    @Scheduled(cron = "0 30 1 * * *") // Todo dia √†s 01:30 (antes da limpeza geral)
    @Transactional
    public void dailyCleanupZeroScoreSessions() {
        System.out.println("üïí [SCHEDULER] Iniciando limpeza de sess√µes com score zero...");

        LocalDateTime cutoffTime = LocalDateTime.now().minusHours(24);

        // Busca sess√µes finalizadas (n√£o ativas) com score 0 criadas h√° mais de 24h
        List<QuizSession> zeroScoreSessions = quizSessionRepository
                .findByScoreAndIsActiveFalseAndCreatedAtBefore(0, cutoffTime);

        if (zeroScoreSessions.isEmpty()) {
            System.out.println("üóëÔ∏è [SCHEDULER] Nenhuma sess√£o com score zero encontrada para limpeza");
            return;
        }

        System.out.println("üóëÔ∏è [SCHEDULER] Removendo " + zeroScoreSessions.size() +
                " sess√£o(√µes) com score zero (24h+)");

        // Remove as sess√µes com score zero
        quizSessionRepository.deleteAll(zeroScoreSessions);

        // Tamb√©m remove os scores zero associados (se existirem)
        cleanupZeroScoresFromDatabase();

        System.out.println("‚úÖ [SCHEDULER] Limpeza de score zero conclu√≠da com sucesso");
    }


    @Scheduled(cron = "0 45 1 * * SUN") // Todo domingo √†s 01:45
    @Transactional
    public void weeklyAggressiveZeroScoreCleanup() {
        System.out.println("üïí [SCHEDULER] Iniciando limpeza agressiva semanal de score zero...");

        LocalDateTime cutoffTime = LocalDateTime.now().minusHours(1);

        // Remove TODAS as sess√µes com score 0 (ativas ou n√£o) mais antigas que 1h
        List<QuizSession> allZeroScoreSessions = quizSessionRepository
                .findByScoreAndCreatedAtBefore(0, cutoffTime);

        if (allZeroScoreSessions.isEmpty()) {
            System.out.println("üóëÔ∏è [SCHEDULER] Nenhuma sess√£o com score zero encontrada para limpeza agressiva");
            return;
        }

        System.out.println("üóëÔ∏è [SCHEDULER] Limpeza agressiva: removendo " + allZeroScoreSessions.size() +
                " sess√£o(√µes) com score zero");

        quizSessionRepository.deleteAll(allZeroScoreSessions);
        cleanupZeroScoresFromDatabase();

        System.out.println("‚úÖ [SCHEDULER] Limpeza agressiva de score zero conclu√≠da");
    }

    @Scheduled(cron = "0 0 2 * * *") // Todo dia √†s 02:00
    @Transactional
    public void dailyCleanupAbandonedSessions() {
        System.out.println("üïí [SCHEDULER] Iniciando limpeza autom√°tica de sess√µes abandonadas...");

        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(7);

        // Busca todas as sess√µes ativas criadas h√° mais de 7 dias
        List<QuizSession> abandonedSessions = quizSessionRepository
                .findByIsActiveTrueAndCreatedAtBefore(cutoffDate);

        if (abandonedSessions.isEmpty()) {
            System.out.println("üßπ [SCHEDULER] Nenhuma sess√£o abandonada encontrada para limpeza");
            return;
        }

        System.out.println("üßπ [SCHEDULER] Removendo " + abandonedSessions.size() +
                " sess√£o(√µes) abandonada(s) h√° mais de 7 dias");

        // Remove as sess√µes abandonadas
        quizSessionRepository.deleteAll(abandonedSessions);

        System.out.println("‚úÖ [SCHEDULER] Limpeza autom√°tica conclu√≠da com sucesso");
    }


    @Scheduled(cron = "0 0 3 * * SUN") // Todo domingo √†s 03:00
    @Transactional
    public void weeklyCleanupOldSessions() {
        System.out.println("üïí [SCHEDULER] Iniciando limpeza semanal de sess√µes muito antigas...");

        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(30);

        // Busca sess√µes abandonadas h√° mais de 30 dias
        List<QuizSession> oldSessions = quizSessionRepository
                .findByIsActiveTrueAndCreatedAtBefore(cutoffDate);

        if (oldSessions.isEmpty()) {
            System.out.println("üßπ [SCHEDULER] Nenhuma sess√£o antiga encontrada para limpeza semanal");
            return;
        }

        System.out.println("üßπ [SCHEDULER] Removendo " + oldSessions.size() +
                " sess√£o(√µes) muito antiga(s) (30+ dias)");

        quizSessionRepository.deleteAll(oldSessions);

        System.out.println("‚úÖ [SCHEDULER] Limpeza semanal conclu√≠da com sucesso");
    }


    @Scheduled(cron = "0 0 * * * *") // A cada hora
    public void hourlyStatusReport() {
        long activeSessionsCount = quizSessionRepository.countByIsActiveTrue();

        if (activeSessionsCount > 100) { // Limite de alerta
            System.out.println("‚ö†Ô∏è [ALERT] Muitas sess√µes ativas detectadas: " + activeSessionsCount);
        } else if (activeSessionsCount > 50) {
            System.out.println("üìä [INFO] Sess√µes ativas no sistema: " + activeSessionsCount);
        }
        // Se for menor que 50, n√£o loga para evitar spam
    }


    @Transactional
    public int cleanupSessionsOlderThanHours(int hours) {
        LocalDateTime cutoffTime = LocalDateTime.now().minusHours(hours);

        List<QuizSession> abandonedSessions = quizSessionRepository
                .findByIsActiveTrueAndCreatedAtBefore(cutoffTime);

        if (!abandonedSessions.isEmpty()) {
            System.out.println("üßπ Limpeza manual: removendo " + abandonedSessions.size() +
                    " sess√£o(√µes) abandonada(s) h√° mais de " + hours + " hora(s)");

            quizSessionRepository.deleteAll(abandonedSessions);
        }

        return abandonedSessions.size();
    }

    @Transactional
    public int cleanupZeroScoreSessionsOlderThanHours(int hours) {
        LocalDateTime cutoffTime = LocalDateTime.now().minusHours(hours);

        List<QuizSession> zeroScoreSessions = quizSessionRepository
                .findByScoreAndIsActiveFalseAndCreatedAtBefore(0, cutoffTime);

        if (!zeroScoreSessions.isEmpty()) {
            System.out.println("üóëÔ∏è Limpeza manual score zero: removendo " + zeroScoreSessions.size() +
                    " sess√£o(√µes) com score 0 h√° mais de " + hours + " hora(s)");

            quizSessionRepository.deleteAll(zeroScoreSessions);
            cleanupZeroScoresFromDatabase();
        }

        return zeroScoreSessions.size();
    }


    @Transactional
    public int cleanupAllZeroScoreSessions() {
        List<QuizSession> allZeroScoreSessions = quizSessionRepository.findByScore(0);

        if (!allZeroScoreSessions.isEmpty()) {
            System.out.println("üóëÔ∏è Limpeza agressiva manual: removendo TODAS as " + allZeroScoreSessions.size() +
                    " sess√£o(√µes) com score zero");

            quizSessionRepository.deleteAll(allZeroScoreSessions);
            cleanupZeroScoresFromDatabase();
        }

        return allZeroScoreSessions.size();
    }


    @Transactional
    public int cleanupActiveZeroScoreSessions() {
        List<QuizSession> activeZeroSessions = quizSessionRepository
                .findByScoreAndIsActiveTrue(0);

        if (!activeZeroSessions.isEmpty()) {
            System.out.println("üóëÔ∏è Limpeza de abandonos: removendo " + activeZeroSessions.size() +
                    " sess√£o(√µes) ativa(s) com score zero");

            quizSessionRepository.deleteAll(activeZeroSessions);
        }

        return activeZeroSessions.size();
    }


    @Transactional
    public int intelligentZeroScoreCleanup() {
        LocalDateTime abandonedCutoff = LocalDateTime.now().minusHours(2);
        LocalDateTime finishedCutoff = LocalDateTime.now().minusHours(24);

        // Sess√µes ativas abandonadas h√° mais de 2h com score 0
        List<QuizSession> abandonedZeroSessions = quizSessionRepository
                .findByScoreAndIsActiveTrueAndCreatedAtBefore(0, abandonedCutoff);

        // Sess√µes finalizadas h√° mais de 24h com score 0
        List<QuizSession> finishedZeroSessions = quizSessionRepository
                .findByScoreAndIsActiveFalseAndCreatedAtBefore(0, finishedCutoff);

        int totalDeleted = 0;

        if (!abandonedZeroSessions.isEmpty()) {
            System.out.println("üóëÔ∏è Limpeza inteligente: removendo " + abandonedZeroSessions.size() +
                    " sess√£o(√µes) abandonada(s) com score zero (2h+)");
            quizSessionRepository.deleteAll(abandonedZeroSessions);
            totalDeleted += abandonedZeroSessions.size();
        }

        if (!finishedZeroSessions.isEmpty()) {
            System.out.println("üóëÔ∏è Limpeza inteligente: removendo " + finishedZeroSessions.size() +
                    " sess√£o(√µes) finalizada(s) com score zero (24h+)");
            quizSessionRepository.deleteAll(finishedZeroSessions);
            totalDeleted += finishedZeroSessions.size();
        }

        if (totalDeleted > 0) {
            cleanupZeroScoresFromDatabase();
            System.out.println("‚úÖ Limpeza inteligente conclu√≠da: " + totalDeleted + " sess√µes removidas");
        }

        return totalDeleted;
    }

    private void cleanupZeroScoresFromDatabase() {
        try {
            int deletedScores = scoreRepository.deleteByPoints(0);
            if (deletedScores > 0) {
                System.out.println("üóëÔ∏è Removidos " + deletedScores + " registro(s) de score zero da tabela Score");
            }
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Erro ao limpar scores zero: " + e.getMessage());
        }
    }

    public Map<String, Long> getZeroScoreSessionsReport() {
        long activeZeroScore = quizSessionRepository.countByScoreAndIsActiveTrue(0);
        long finishedZeroScore = quizSessionRepository.countByScoreAndIsActiveFalse(0);
        long totalZeroScore = quizSessionRepository.countByScore(0);
        long zeroScoreRecords = scoreRepository.countByPoints(0);

        Map<String, Long> report = new HashMap<>();
        report.put("activeZeroScoreSessions", activeZeroScore);
        report.put("finishedZeroScoreSessions", finishedZeroScore);
        report.put("totalZeroScoreSessions", totalZeroScore);
        report.put("zeroScoreRecords", zeroScoreRecords);

        return report;
    }
}